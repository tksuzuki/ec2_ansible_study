---
- name: Facts about default VPC
  ec2_vpc_net_facts:
   ### vpc idを調べる
   ### タグ名が"ans_vpc01"のものをfilterし、変数に格納
   ### vpcs: cidr_block, class_link_enabled, dhcp_option_id, id, instance_tenancy, is_default, state, tags
   ### id:  "vpc-15498d73"

    filters:
      "tag:Name": "ans_vpc01"
  register: vpc_net_find
- debug: var=vpc_net_find

- name: Facts about default VPC subnet
  ec2_vpc_subnet_facts:
   ### subnet idを調べる
   ### タグ名がans_private_subxのものをfilterし、変数に格納
   ### subnets: availability_zone, available_ip_addrress_count, cidr_block, default_for_az, id, map_public_ip_on_launch, state, tags
   ### id: "subnet-8f7799e9"

    filters:
      vpc-id: "{{ vpc_net_find.vpcs[0].id }}"
      "tag:Name": "{{ item }}"
  with_items:  "{{ ec2_vpc_subnet_id }}"
  register: vpc_subnet_find
- debug: var=vpc_subnet_find

- name: Search for the CentOS 7.3 AMI
  ec2_ami_find:
   ### ami idを調べる
   ### 以下の条件で検索し、マッチしたami idを変数に格納
   ### result: ami_id, architecture, block_device_mapping
   ### ami_id: "ami-0c2aba6c"

    name: "CentOS Linux 7 x86_64 HVM EBS 1703_*"
    owner: 410186602215
    architecture: x86_64
    virtualization_type: hvm
    sort: creationDate
    sort_order: descending
    sort_end: 1
    no_result_action: fail
  register: ami_find
- debug: var=ami_find

- name: Launch EC2 Instance
  ec2:
    region: "{{ ec2_region }}"
    zone: "{{ ec2_zone }}"
    exact_count: "{{ ec2_exact_count }}"
    count_tag: 
      Name: "{{ ec2_name }}"
    ### ami_findの結果で一番目の結果の中からami_idの値
    image: "{{ ami_find.results[0].ami_id }}"
    instance_type: "{{ ec2_instance_type }}"
    key_name: "{{ ec2_key_name }}"
    group: "{{ ec2_group }}"
    instance_tags:
      Name: "{{ ec2_name }}"
      Env: "{{ ec2_instance_tag_env }}"
      Owner: "{{ ec2_instance_tag_owner }}"
    ebs_optimized: "{{ ec2_ebs_optimized }}"
    monitoring: "{{ ec2_monitoring }}"
    volumes:
      - device_name: "{{ ec2_volumes_device_name }}"
        volume_type: "{{ ec2_volumes_volume_type }}"
        volume_size: "{{ ec2_volumes_volume_size }}"
        delete_on_termination: "{{ ec2_volumes_delete_on_termination }}"
    ### vpc_subnet_findの結果で１番目の結果の中からsubnetの中の１番目のidの値
    vpc_subnet_id: "{{ vpc_subnet_find.results[0].subnets[0].id }}"
    assign_public_ip: "{{ ec2_assign_public_ip }}"
    private_ip: "{{ ec2_private_ip }}"
    placement_group: "{{ ec2_placement_group }}"
    source_dest_check: "{{ ec2_source_dest_check }}"
    spot_launch_group: "{{ ec2_spot_launch_group }}"
    tenancy: "{{ ec2_tenancy }}"
    termination_protection: "{{ ec2_termination_protection }}"
    validate_certs: "{{ ec2_validate_certs }}"
    wait: "{{ ec2_wait }}"
  register: launch_instance
- debug: var=launch_instance


- name: Add Inventory Created EC2 Instances
  local_action: add_host name="{{ ec2_name }}" groups=guests
  changed_when: false
  #check_mode: no
  register: add_inventory
- debug: var=add_inventory

- name: Wait For SSH Connection
  local_action: wait_for port=22 host="{{ ec2_private_ip }}" delay=30 timeout=120 state=started
  register: ssh_wait_for
- debug: var=ssh_wait_for 
